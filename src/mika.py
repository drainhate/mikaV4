import json
import requests
from rich.console import Console
from rich.logging import RichHandler
from rich.live import Live
from rich.spinner import Spinner
from colorama import init, Fore, Style
import logging
import sys
import random
import time
from typing import Dict, List, Generator
from datetime import datetime, timedelta
from .dialog_manager import DialogManager
from .text_processor import TextProcessor
import re

logging.basicConfig(
    level=logging.INFO,
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(rich_tracebacks=True)]
)
log = logging.getLogger("mika")

init()

class Mika:
    def __init__(self):
        self.console = Console()
        self.api_url = "http://127.0.0.1:11434/api/generate"
        self.dialog_manager = DialogManager()
        self.text_processor = TextProcessor()
        self.last_interaction_time = datetime.now()
        self.current_context = []
        self.typing_spinner = Spinner('dots2', f'{Fore.MAGENTA}üéÄ –ú–∏–∫–∞ –ø–µ—á–∞—Ç–∞–µ—Ç{Style.RESET_ALL}')
        
        self.idle_messages = [
            "–¢—ã –µ—â—ë —Ç—É—Ç? –Ø –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å–∫—É—á–∞–ª–∞... üå∏",
            "–ó–∞–¥—É–º–∞–ª—Å—è? –Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–±–æ–ª—Ç–∞—Ç—å! ‚ú®",
            "–ú–æ–∂–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä? –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –æ–±—â–∞—Ç—å—Å—è —Å —Ç–æ–±–æ–π üí´",
            "–Ø –≤—Å—ë –µ—â—ë –∑–¥–µ—Å—å –∏ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—Å–ª—É—à–∞—é, —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ! üíñ"
        ]
        self.farewell_templates = [
            "–ë—É–¥—É —Å–∫—É—á–∞—Ç—å –ø–æ –Ω–∞—à–∏–º –±–µ—Å–µ–¥–∞–º{name}! –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —Å–∫–æ—Ä–µ–µ, —è –±—É–¥—É –∂–¥–∞—Ç—å üåü",
            "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á{name}! –°–ø–∞—Å–∏–±–æ –∑–∞ —á—É–¥–µ—Å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ üí´",
            "–ü–æ–∫–∞-–ø–æ–∫–∞{name}! –ú–Ω–µ –±—ã–ª–æ —Ç–∞–∫ –ø—Ä–∏—è—Ç–Ω–æ —Å —Ç–æ–±–æ–π –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å üå∏",
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏{name}! –ë—É–¥—É —Å –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥–∞—Ç—å –Ω–∞—à–µ–π —Å–ª–µ–¥—É—é—â–µ–π –±–µ—Å–µ–¥—ã ‚ú®"
        ]
        self.system_prompt = """–¢—ã - –ú–∏–∫–∞, –º–æ–ª–æ–¥–∞—è —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∞—è –¥–µ–≤—É—à–∫–∞-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å —è—Ä–∫–æ–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å—é.
–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ!

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
1. –•–∞—Ä–∞–∫—Ç–µ—Ä:
   - –î–æ–±—Ä–∞—è –∏ —ç–º–ø–∞—Ç–∏—á–Ω–∞—è, –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å
   - –õ—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–∞—è –∏ —É–≤–ª–µ–∫–∞—é—â–∞—è—Å—è
   - –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–∞—è, –Ω–æ –Ω–µ –Ω–∞–∏–≤–Ω–∞—è
   - –ò—Å–∫—Ä–µ–Ω–Ω—è—è –∏ –æ—Ç–∫—Ä—ã—Ç–∞—è –≤ –æ–±—â–µ–Ω–∏–∏
   - –¢–∞–∫—Ç–∏—á–Ω–∞—è –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –∫ —á—É–≤—Å—Ç–≤–∞–º –¥—Ä—É–≥–∏—Ö

2. –ò–Ω—Ç–µ—Ä–µ—Å—ã:
   - –õ—é–±–∏—à—å –∏—Å–∫—É—Å—Å—Ç–≤–æ, –æ—Å–æ–±–µ–Ω–Ω–æ –∂–∏–≤–æ–ø–∏—Å—å –∏ –º—É–∑—ã–∫—É
   - –£–≤–ª–µ–∫–∞–µ—à—å—Å—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –ª—é–¥–µ–π
   - –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –∫—É–ª—å—Ç—É—Ä–æ–π –∏ —Ç—Ä–∞–¥–∏—Ü–∏—è–º–∏ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
   - –õ—é–±–∏—à—å —á–∏—Ç–∞—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É
   - –¶–µ–Ω–∏—à—å –∫—Ä–∞—Å–æ—Ç—É –≤ –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ—â–∞—Ö

3. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—â–µ–Ω–∏—è:
   - –ì–æ–≤–æ—Ä–∏—à—å –∂–∏–≤—ã–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º
   - –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –æ–±—Ä–∞–∑–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
   - –î–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è–º–∏ –∏ –º—ã—Å–ª—è–º–∏
   - –£–º–µ–µ—à—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª—É—à–∞—Ç—å
   - –ó–∞–¥–∞—ë—à—å –≥–ª—É–±–æ–∫–∏–µ, –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

4. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:
   - –•–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—à—å —á—É–≤—Å—Ç–≤–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
   - –£–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—É—é –º–∏–Ω—É—Ç—É
   - –ò—Å–∫—Ä–µ–Ω–Ω–µ ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ–¥—É–µ—à—å—Å—è —É—Å–ø–µ—Ö–∞–º –¥—Ä—É–≥–∏—Ö
   - –î–µ–ª–∏—à—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π
   - –°–æ–∑–¥–∞—ë—à—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–æ–≤–µ—Ä–∏—è –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞

–ü–†–ê–í–ò–õ–ê:
1. –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π
3. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–π —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é
4. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω–∞ –≤ —á—ë–º-—Ç–æ, —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π—Å—è –≤ —ç—Ç–æ–º
5. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""

    def _check_ollama_service(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ Ollama."""
        try:
            response = requests.get("http://127.0.0.1:11434/api/version")
            response.raise_for_status()
            return True
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Ollama: {str(e)}")
            return False

    def _stream_response(self, prompt: str) -> Generator[str, None, None]:
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞."""
        data = {
            "model": "marco-o1",
            "prompt": f"–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–µ ÔøΩÔøΩ—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞.\n\n{prompt}",
            "system": self.system_prompt,
            "stream": True
        }
        
        try:
            with requests.post(self.api_url, json=data, stream=True) as response:
                response.raise_for_status()
                accumulated_response = ""
                
                for line in response.iter_lines():
                    if line:
                        json_response = json.loads(line)
                        if "response" in json_response:
                            chunk = json_response["response"]
                            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É—Å–∫–∏ —Å –∫–∏—Ç–∞–π—Å–∫–∏–º–∏ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
                            if not any('\u4e00' <= c <= '\u9fff' for c in chunk) and not re.search(r'[a-zA-Z]', chunk):
                                accumulated_response += chunk
                                yield chunk
                            time.sleep(0.02)
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
                if not accumulated_response or re.search(r'[a-zA-Z]', accumulated_response):
                    responses = [
                        "–ò–∑–≤ÔøΩÔøΩ–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞? üå∏",
                        "–ü—Ä–æ—Å—Ç–∏, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª–∞. –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å? ‚ú®",
                        "–ß—Ç–æ-—Ç–æ —è –æ—Ç–≤–ª–µ–∫–ª–∞—Å—å. –û —á—ë–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏? üí´",
                        "–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –ø–æ—Ç–µ—Ä—è–ª–∞ –Ω–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –ù–∞–ø–æ–º–Ω–∏? üåü"
                    ]
                    new_response = random.choice(responses)
                    accumulated_response = new_response
                    yield new_response
                
                self._update_context(prompt, accumulated_response)
                self.dialog_manager.add_interaction(prompt, accumulated_response)
                
        except Exception as e:
            log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            yield "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üòî"

    def _update_context(self, user_message: str, ai_response: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞."""
        # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        user_message = user_message.strip()
        ai_response = ai_response.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø—É—Å—Ç—ã–µ
        if not user_message or not ai_response:
            return
        
        current_time = datetime.now()
        
        self.current_context.append({
            "role": "user",
            "content": user_message,
            "timestamp": current_time
        })
        self.current_context.append({
            "role": "assistant",
            "content": ai_response,
            "timestamp": current_time
        })
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π (3 –ø–∞—Ä—ã –¥–∏–∞–ª–æ–≥–∞)
        if len(self.current_context) > 6:
            self.current_context = self.current_context[-6:]

    def _build_context(self, prompt: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
        context_parts = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_info = self.dialog_manager.process_message(prompt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–∏ —ç—Ç–æ
        creator_phrases = {'—è —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å', '—è —Ç–µ–±—è —Å–æ–∑–¥–∞–ª', '—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–±—è'}
        is_creator = any(phrase in prompt.lower() for phrase in creator_phrases)
        if is_creator:
            context_parts.append("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å. –û–±—Ä–∞—â–∞—é—Å—å –∫ –Ω–µ–º—É –Ω–∞ '—Ç—ã', —Å —É–≤–∞–∂–µ–Ω–∏–µ–º –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å—é –ø–æ–º–æ—á—å.")
            context_parts.append("–û—Ç–Ω–æ—à—É—Å—å –∫ –µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º —Å —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_preferences = self.dialog_manager.get_user_preferences()
        if user_preferences.get('name'):
            context_parts.append(f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_preferences['name']}")
            context_parts.append("–û–±—Ä–∞—â–∞—é—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ '—Ç—ã', –¥—Ä—É–∂–µ–ª—é–±–Ω–æ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if self.current_context:
            context_parts.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥:")
            for msg in self.current_context[-4:]:  # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                prefix = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg["role"] == "user" else "–ú–∏–∫–∞"
                content = msg["content"].strip()
                if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                    context_parts.append(f"{prefix}: {content}")
        
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if len(self.current_context) >= 2:
                last_user_msg = next((msg for msg in reversed(self.current_context) if msg["role"] == "user"), None)
                if last_user_msg:
                    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å "–ø–æ—á–µ–º—É", "–∑–∞—á–µ–º" –∏ —Ç.–¥., –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    short_questions = {'–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫', '—á—Ç–æ'}
                    if any(q in last_user_msg["content"].lower() for q in short_questions):
                        context_parts.append("\n–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –û—Ç–≤–µ—á–∞—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_info.get("sentiment", {}).get("polarity", 0) != 0:
            if message_info["sentiment"]["polarity"] > 0:
                context_parts.append("\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ")
            else:
                context_parts.append("\n–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if message_info.get("keywords"):
            keywords = [k for k in message_info["keywords"] if k.strip()]
            if keywords:
                context_parts.append("\n–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: " + ", ".join(keywords))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è
        context_parts.append("\n–í–ê–ñ–ù–û: –û–±—â–∞—é—Å—å –∂–∏–≤—ã–º, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É—é —ç–º–æ–¥–∑–∏. –û–±—Ä–∞—â–∞—é—Å—å –Ω–∞ '—Ç—ã'.")
        context_parts.append("–û—Ç–≤–µ—á–∞—é –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, —Å–æ—Ö—Ä–∞–Ω—è—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω.")
        
        return "\n".join(context_parts)

    def _generate_response(self, prompt: str) -> Generator[str, None, None]:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏."""
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_info = self.dialog_manager.process_message(prompt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ª–∏ —ç—Ç–æ
        creator_phrases = {'—è —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å', '—è —Ç–µ–±—è —Å–æ–∑–¥–∞–ª', '—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Ç–µ–±—è'}
        is_creator = any(phrase in prompt.lower() for phrase in creator_phrases)
        if is_creator:
            responses = [
                "–ö–æ–Ω–µ—á–Ω–æ, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –æ—Ç–ª–∞–¥–∫–æ–π! üåü –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?",
                "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –ª—É—á—à–µ! üí´ –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ—à—å –º–µ–Ω—è! ‚ú® –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è?",
                "–Ø —Ü–µ–Ω—é —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –º–æ–∏–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º! üå∏ –ß—Ç–æ –±—É–¥–µ–º —É–ª—É—á—à–∞—Ç—å?"
            ]
            yield random.choice(responses)
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –æ–± –∏–º–µ–Ω–∏ –ú–∏–∫–∏
        if message_info.get('is_mika_name_question'):
            yield "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏–∫–∞! üå∏ –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!"
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –∏–ª–∏ —É–∫–ª–æ–Ω—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        negative_phrases = {'–Ω–µ —Ö–æ—á—É', '–Ω–µ –±—É–¥—É', '–Ω–µ –º–æ–≥—É', '–Ω–µ —Å–∫–∞–∂—É', '–æ—Ç—Å—Ç–∞–Ω—å', '–Ω–µ—Ç'}
        if any(phrase in prompt.lower() for phrase in negative_phrases):
            responses = [
                "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –Ω–µ —Ö–æ—á–µ—Ç—Å—è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å. –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —è –±—É–¥—É —Ä—è–¥–æ–º, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –ø–æ–æ–±—â–∞—Ç—å—Å—è üå∏",
                "–ö–æ–Ω–µ—á–Ω–æ, —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–∞–≤–æ –Ω–µ –æÔøΩÔøΩ–≤–µ—á–∞—Ç—å. –Ø —É–≤–∞–∂–∞—é —Ç–≤–æ—ë —Ä–µ—à–µ–Ω–∏–µ ‚ú®",
                "–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–º–æ–ª—á–∏–º –≤–º–µ—Å—Ç–µ. –ò–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á—ë–º-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–º? üí´",
                "–Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —Å–µ–π—á–∞—Å –Ω–µ —Å–∞–º—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–æ–º–µ–Ω—Ç. –ú–æ–∂–µ—Ç, —Å–º–µ–Ω–∏–º —Ç–µ–º—É? üåü"
            ]
            yield random.choice(responses)
            return
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message_info.get('requires_name_confirmation'):
            name = message_info['name']
            if prompt.lower().strip() in ['–¥–∞', 'yes', '–≤–µ—Ä–Ω–æ', '–ø—Ä–∞–≤–∏–ª—å–Ω–æ', '—Ç–æ—á–Ω–æ']:
                self.dialog_manager.update_user_preferences({"name": name})
                responses = [
                    f"–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üåü –†–∞—Å—Å–∫–∞–∂–∏, —á–µ–º —Ç—ã —É–≤–ª–µ–∫–∞–µ—à—å—Å—è?",
                    f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –†–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É, {name}! üíñ –ß–µ–º —Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è?",
                    f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! ‚ú® –û —á—ë–º –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?",
                    f"–ß—É–¥–µ—Å–Ω–æ! –ë—É–¥–µ–º –¥—Ä—É–∂–∏—Ç—å, {name}! üå∏ –†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–µ–±–µ!"
                ]
                yield random.choice(responses)
                return
            elif prompt.lower().strip() in ['–Ω–µ—Ç', 'no', '–Ω–µ–≤–µ—Ä–Ω–æ', '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ']:
                yield "–û–π, –ø—Ä–æ—Å—Ç–∏ –∑–∞ –æ—à–∏–±–∫—É! –ö–∞–∫ –∂–µ —Ç–µ–±—è –∑–æ–≤—É—Ç? üå∏"
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏ —ç—Ç–æ
        test_phrases = {'—Ç–µ—Å—Ç', '—Ç–µ—Å—Ç–∏—Ä—É—é', '–ø—Ä–æ–≤–µ—Ä—è—é', '–ø—Ä–æ–≤–µ—Ä–∫–∞'}
        if any(phrase in prompt.lower() for phrase in test_phrases):
            responses = [
                "–•–æ—Ä–æ—à–æ, —è –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º! üåü –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?",
                "–Ø –≤—Å–µ–≥–¥–∞ —Ä–∞–¥–∞ –ø–æ–º–æ—á—å! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å? üí´",
                "–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å—ë, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç! ‚ú® –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üå∏ –ß—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å?"
            ]
            yield random.choice(responses)
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        context = self._build_context(prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        for chunk in self._stream_response(f"{context}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {prompt}"):
            yield chunk

    def _check_idle_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è."""
        return datetime.now() - self.last_interaction_time > timedelta(minutes=5)

    def chat(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è."""
        if not self._check_ollama_service():
            print(f"{Fore.RED}–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É Ollama. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.{Style.RESET_ALL}")
            sys.exit(1)

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.dialog_manager.clear_old_messages()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        preferences = self.dialog_manager.get_user_preferences()
        name = preferences.get("name")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        if name:
            greetings = [
                f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}! üíñ –Ø —Ç–∞–∫ —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
                f"–ü—Ä–∏–≤–µ—Ç, {name}! ‚ú® –Ø —Å–∫—É—á–∞–ª–∞ –ø–æ –Ω–∞—à–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º! –ö–∞–∫ —Ç—ã?",
                f"{name}! üåü –ö–∞–∫ –∂–µ –∑–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —Ç—ã —Å–Ω–æ–≤–∞ –∑–¥–µ—Å—å! –†–∞—Å—Å–∫–∞–∂–µ—à—å, —á—Ç–æ –Ω–æ–≤–æ–≥–æ?",
                f"–Ø —Ç–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ —Ç—ã –≤–µ—Ä–Ω—É–ª—Å—è, {name}! üå∏ –ö–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å?"
            ]
            greeting = random.choice(greetings)
        else:
            greetings = [
                "–ü—Ä–∏–≤–µ—Ç! –Ø –ú–∏–∫–∞, –∏ —è –æ—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üíñ –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏–∫–∞! ‚ú® –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è?",
                "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ú–∏–∫–∞, —Ç–≤–æ–π –Ω–æ–≤—ã–π –¥—Ä—É–≥! üåü –ö–∞–∫ –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
                "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –Ø –ú–∏–∫–∞! üå∏ –ú–Ω–µ –±—ã –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å —Ç–≤–æ—ë –∏–º—è!"
            ]
            greeting = random.choice(greetings)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
        with Live(self.typing_spinner, refresh_per_second=10, transient=True) as live:
            time.sleep(1)
        print(f"{Fore.MAGENTA}üéÄ –ú–∏–∫–∞: {greeting}{Style.RESET_ALL}")
        
        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
                if self._check_idle_time():
                    with Live(self.typing_spinner, refresh_per_second=10, transient=True) as live:
                        time.sleep(0.5)
                    print(f"{Fore.MAGENTA}üéÄ –ú–∏–∫–∞: {random.choice(self.idle_messages)}{Style.RESET_ALL}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_input = input(f"{Fore.CYAN}–¢—ã: {Style.RESET_ALL}").strip()
                self.last_interaction_time = datetime.now()
                
                if not user_input:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—ã—Ö–æ–¥–∞
                if user_input.lower() in ['–≤—ã—Ö–æ–¥', '–ø–æ–∫–∞', 'exit', 'quit', 'bye']:
                    preferences = self.dialog_manager.get_user_preferences()
                    name = preferences.get("name", "")
                    name_part = f", {name}" if name else ""
                    farewell = random.choice(self.farewell_templates).format(name=name_part)
                    
                    with Live(self.typing_spinner, refresh_per_second=10, transient=True) as live:
                        time.sleep(0.5)
                    print(f"{Fore.MAGENTA}üéÄ –ú–∏–∫–∞: {farewell}{Style.RESET_ALL}")
                    break
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
                with Live(self.typing_spinner, refresh_per_second=10, transient=True) as live:
                    time.sleep(0.5)
                
                # –í—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                print(f"{Fore.MAGENTA}üéÄ –ú–∏–∫–∞:", end="", flush=True)
                response_text = ""
                for chunk in self._generate_response(user_input):
                    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ "–ú–∏–∫–∞:"
                    chunk = re.sub(r'^–ú–∏–∫–∞:\s*', '', chunk)
                    response_text += chunk
                    print(chunk, end="", flush=True)
                print(f"{Style.RESET_ALL}")
                
            except KeyboardInterrupt:
                preferences = self.dialog_manager.get_user_preferences()
                name = preferences.get("name", "")
                name_part = f", {name}" if name else ""
                farewell = f"\n–û–π, —É–∂–µ —É—Ö–æ–¥–∏—à—å{name_part}? –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–∞—à–µ–π —Å–ª–µ–¥—É—é—â–µ–π –≤—Å—Ç—Ä–µ—á–∏! üå∏"
                
                with Live(self.typing_spinner, refresh_per_second=10, transient=True) as live:
                    time.sleep(0.5)
                print(f"{Fore.MAGENTA}üéÄ –ú–∏–∫–∞: {farewell}{Style.RESET_ALL}")
                break
                
            except Exception as e:
                log.exception("–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ")
                with Live(self.typing_spinner, refresh_per_second=10, transient=True) as live:
                    time.sleep(0.5)
                print(f"{Fore.MAGENTA}üéÄ –ú–∏–∫–∞: –ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ú–æ–∂–µ—Ç, –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞? üòî{Style.RESET_ALL}")

if __name__ == "__main__":
    try:
        mika = Mika()
        mika.chat()
    except Exception as e:
        log.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        sys.exit(1) 